alpha = /[a-zA-Z]/;
alphanumeric = /[a-zA-Z0-9]/;
numeric = /[0-9]+/;
word = /[a-zA-z][a-zA-Z0-9]*/;
operator = "+" | "-" | "*" | "/" | ":=" | "==" | "!=" | ">" | "<" | ">=" | "<=";
ascii = ["?" | "!" | "." | "'" | "\n" | "\ "];


var_name = word ["[" value "]"]; 
literal = (numeric ["." numeric]) | ('"' alphanumeric '"') | "True" | "False" | "[" value {"," value} "]" | ('"' ascii '"');
type_keyword = "int" | "char" | "bool" | "float";
type_declaration = type_keyword var_name ":=" value /$/;
expression = "(" value operator value ")";
value = literal | var_name | expression;
assignment = var_name ":=" value;


function_definition = "def" type_keyword var_name "(" [ type_keyword var_name {"," type_keyword var_name } ] ")" [/$/] block;
function_call = var_name "(" [value {"," value}] ")";


condition_statement = "if" value block ["else" block];
loop_statement = "do" block "while" block;
control_statement = condition_statement | loop_statement;


block = "{" /$/  { type_declaration | expression | assignment | function_call | control_statement } [/$/] "}";
program = "@@@" {/$/} {function_definition | type_declaration | expression | assignment | function_call | control_statement} {/$/} "@@@";

comment = "#" {/./} /$/;

