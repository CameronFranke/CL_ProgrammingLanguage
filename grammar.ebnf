alpha = /[a-zA-Z]/;
alphanumeric = /[a-zA-Z0-9]/;
numeric = /[0-9]+/;
word = /[a-zA-z][a-zA-Z0-9]*/;
operator = "+" | "-" | "*" | "/" | ":=" | "==" | "!=" | ">=" | "<=" | ">" | "<" ;
ascii = ["?" | "!" | "." | "'" | " " | "\\n" | "$"];
W = {"\t" | " "};
NW = { "\n" | W };

var_name = word ["[" value "]"]; 
literal = (numeric ["." numeric]) | ('"' alphanumeric '"') | "True" | "False" | "[" W value { W  "," W  value W } W "]" W | '"' ascii '"';
type_keyword = "int" | "char" | "bool" | "float";

type_declaration = W type_keyword W var_name W [":=" W value ] W "\n";

expression = W "(" W value W operator W value W ")" W;
value = literal | var_name | expression;
assignment = W var_name W ":=" W value W "\n";


function_definition = W "def " type_keyword W var_name W "(" W [ type_keyword W var_name W {"," W type_keyword W var_name W} ] W ")" W ["\n"] block;

function_call = W var_name W "(" W [ value W { W "," W value}] W ")" W "\n";


condition_statement = W "if" W value NW block NW;
loop_statement = W "while" W value NW block NW;
control_statement = condition_statement | loop_statement;

block = "{" NW {function_call | type_declaration | assignment | control_statement} NW "}" NW;
program = "@@@" {"\n"} {function_definition | type_declaration | expression | assignment | function_call | control_statement | block} {"\n"} "@@@";

comment = "#" {/./} /$/;

